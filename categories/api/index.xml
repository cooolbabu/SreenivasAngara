<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API on Sreenivas R Angara</title>
    <link>https://cooolbabu.github.io/SreenivasAngara/categories/api/</link>
    <description>Recent content in API on Sreenivas R Angara</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jan 2024 18:25:18 -0500</lastBuildDate><atom:link href="https://cooolbabu.github.io/SreenivasAngara/categories/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Pagination in the wild</title>
      <link>https://cooolbabu.github.io/SreenivasAngara/posts/apipagination/</link>
      <pubDate>Wed, 31 Jan 2024 18:25:18 -0500</pubDate>
      
      <guid>https://cooolbabu.github.io/SreenivasAngara/posts/apipagination/</guid>
      <description>In the dynamic API economy, service providers acknowledge the crucial role of API monetization in creating revenue streams. APIs have evolved into the backbone of modern software development, facilitating seamless data exchange between applications. As their complexity and usage increase, the need for efficient data retrieval becomes paramount. Recognizing the symbiotic relationship between API monetization and effective data handling is key for service providers to navigate the evolving landscape successfully, ensuring not only a seamless user experience but also the maximization of revenue potential.</description>
    </item>
    
    <item>
      <title>Secure Azure APIs using Azure B2C Active Directory - Sequence Diagram using Mermaid.js</title>
      <link>https://cooolbabu.github.io/SreenivasAngara/posts/secureazureapib2c/</link>
      <pubDate>Mon, 24 Jul 2023 18:25:02 -0500</pubDate>
      
      <guid>https://cooolbabu.github.io/SreenivasAngara/posts/secureazureapib2c/</guid>
      <description>As an enterprise architect, using text-based diagrams can be a smarter approach for several reasons. Text-based diagrams offer superior portability and accessibility, as they are lightweight and can be shared as plain text files through various communication channels, reaching a broader audience without the need for specialized software. Furthermore, by being version-controlled using tools like Git, text-based diagrams facilitate seamless collaboration among team members, enabling efficient tracking of changes and supporting geographically dispersed teams.</description>
    </item>
    
    <item>
      <title>WIP - API Management Concepts</title>
      <link>https://cooolbabu.github.io/SreenivasAngara/posts/api_management/</link>
      <pubDate>Sun, 21 May 2023 18:25:18 -0500</pubDate>
      
      <guid>https://cooolbabu.github.io/SreenivasAngara/posts/api_management/</guid>
      <description>WIP - Putting my thoughts together a future article on Azure API Management. Policies Authentication Policies Access Restriction Policy Caching Policy Cross Domain Policies Transformation Policies Advanced Policies
Microservice Microservices are fine grained loosely coupled services communicating through light-weight protocols. Azure functions versus Docker. Portability versus serverless
API Management API Mangagement is a process of creating and publishing web application programming interfaces. Enforce usage policies, control access and analyse usage statistics</description>
    </item>
    
    <item>
      <title>WIP - Application Platforms</title>
      <link>https://cooolbabu.github.io/SreenivasAngara/posts/appcontainers/</link>
      <pubDate>Sun, 21 May 2023 18:25:18 -0500</pubDate>
      
      <guid>https://cooolbabu.github.io/SreenivasAngara/posts/appcontainers/</guid>
      <description>WIP - A future article on Enterprise Application Platforms Platforms: JBoss, Microsoft Entity Framework Core, SpringBoot
Applications: Web apps, REST services, SOA, JMS messaging
Layers: Presentation layer, Buiness Layer, Database Layer (use mermaid.js for text to Illustration)
Key concepts: Dependency Injection: Promotes loose coupling .. examples ??? Aspect Orient Programming: Apply application wide services to an application in a declarative fashion Logging, Transactions, Security POJO - Plain Old java object</description>
    </item>
    
  </channel>
</rss>
